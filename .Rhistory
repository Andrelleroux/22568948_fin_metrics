Plot_Weights <- Weights_StackBar()
Plot_Weights
Plot_Weights <- Weights_StackBar()
Plot_Weights
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
pacman::p_load(RcppRoll, tidyverse, zoo, gt, PerformanceAnalytics,
tbl2xts, RColorBrewer, flextable)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_4")
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Plot_Weights <- Weights_StackBar()
Plot_Weights
Plot_Weights <- invisible(Weights_StackBar())
Plot_Weights
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
pacman::p_load(RcppRoll, tidyverse, zoo, gt, PerformanceAnalytics,
tbl2xts, RColorBrewer, flextable)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_4")
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Plot_Weights <- invisible(Weights_StackBar())
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
pacman::p_load(RcppRoll, tidyverse, zoo, gt, PerformanceAnalytics,
tbl2xts, RColorBrewer, flextable)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_4")
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Plot_Weights <- invisible(Weights_StackBar())
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
pacman::p_load(RcppRoll, tidyverse, zoo, gt, PerformanceAnalytics,
tbl2xts, RColorBrewer, flextable)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_4")
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Plot_Weights <- invisible(Weights_StackBar())
Plot_Weights
#Firstly Create the Texevier project
#Texevier::create_template_html(directory = glue::glue("{getwd()}/"), template_name = "Question_4")
#Secondly I fetch the functions that I wrote from the code folder in Question 4
list.files(paste0(getwd(), "/Questions/Question_4/code/"), full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Plot_Weights <- Weights_StackBar()
Plot_Weights
#Firstly Create the Texevier project
#Texevier::create_template_html(directory = glue::glue("{getwd()}/"), template_name = "Question_5")
list.files(paste0(getwd(), "/Questions/Question_5/code/"), full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
View(Data_Workings)
Currencies_df <- Data_Workings()
#Firstly Create the Texevier project
#Texevier::create_template_html(directory = glue::glue("{getwd()}/"), template_name = "Question_5")
list.files(paste0(getwd(), "/Questions/Question_5/code/"), full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Currencies_df <- Data_Workings()
Currencies_df
plot_Hist <- Plot_sdRank(Currencies_df)
plot_Hist
View(Plot_sdRank)
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
pacman::p_load(rugarch, rmgarch, zoo, tbl2xts, RcppRoll, tidyverse)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_5")
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
```{r}
View(Return_Persistence)
plot_Persist <- Return_Persistence(Currencies_df)
plot_Persist
View(Fitting_Garch)
Garch_plot <- Fitting_Garch(Currencies_df)
Garch_plot
View(Fitting_Garch)
View(Imp_Go_Garch)
GoGarch_plot <- Imp_Go_Garch(Currencies_df)
#Firstly Create the Texevier project
#Texevier::create_template_html(directory = glue::glue("{getwd()}/"), template_name = "Question_5")
list.files(paste0(getwd(), "/Questions/Question_5/code/"), full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
GoGarch_plot <- Imp_Go_Garch(Currencies_df)
GoGarch_plot
GoGarch_plot <- Imp_Go_Garch(Currencies_df)
GoGarch_plot
View(Above_Avg_Perf)
#Firstly Create the Texevier project
#Texevier::create_template_html(directory = glue::glue("{getwd()}/"), template_name = "Question_6")
list.files(paste0(getwd(), "/Questions/Question_5/code/"), full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
#Firstly Create the Texevier project
#Texevier::create_template_html(directory = glue::glue("{getwd()}/"), template_name = "Question_6")
list.files(paste0(getwd(), "/Questions/Question_5/code/"), full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
#Firstly Create the Texevier project
#Texevier::create_template_html(directory = glue::glue("{getwd()}/"), template_name = "Question_6")
list.files(paste0(getwd(), "/Questions/Question_6/code/"), full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Combined_df <- Data_Read_Wrangle()
#Firstly Create the Texevier project
#Texevier::create_template_html(directory = glue::glue("{getwd()}/"), template_name = "Question_6")
list.files(paste0(getwd(), "/Questions/Question_6/code/"), full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Combined_df <- Data_Read_Wrangle()
Combined_df
plot_Table <- Current_Opt(Combined_df)
View(Current_Opt)
#Firstly Create the Texevier project
#Texevier::create_template_html(directory = glue::glue("{getwd()}/"), template_name = "Question_6")
list.files(paste0(getwd(), "/Questions/Question_6/code/"), full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
plot_Table <- Current_Opt(Combined_df, Markdown = TRUE)
plot_Table
View(Optimise_Portfolio_ROI)
View(Port_Rebalancing)
plot_HistOpt <- Port_Rebalancing(Combined_df)
#Firstly Create the Texevier project
#Texevier::create_template_html(directory = glue::glue("{getwd()}/"), template_name = "Question_6")
list.files(paste0(getwd(), "/Questions/Question_6/code/"), full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
plot_HistOpt <- Port_Rebalancing(Combined_df)
plot_HistOpt
#Firstly Create the Texevier project
#Texevier::create_template_html(directory = glue::glue("{getwd()}/"), template_name = "Question_6")
list.files(paste0(getwd(), "/Questions/Question_6/code/"), full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
plot_HistOpt <- Port_Rebalancing(Combined_df)
plot_HistOpt
plot_HistOpt <- Port_Rebalancing(Combined_df)
plot_HistOpt
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_1")
ASISA <- read_rds("data/ASISA_Rets.rds")
BM <- read_rds("data/Capped_SWIX.rds")
AI_Fund <- read_rds("data/AI_Max_Fund.rds")
feeconverter <- function(x, Ann_Level) (1+x)^(1/Ann_Level)-1
#Compare over same timeline, choose from 2004 and still active in 2023
#(first year start where all represented)
ASISA_active <- ASISA %>%
group_by(Fund) %>%
filter(first(date) < ymd(20050101)) %>%
filter(last(date) > ymd(20230901)) %>%
filter(date == last(date)) %>%
pull(Fund)
ASISA <- read_rds("data/ASISA_Rets.rds")
BM <- read_rds("data/Capped_SWIX.rds")
AI_Fund <- read_rds("data/AI_Max_Fund.rds")
feeconverter <- function(x, Ann_Level) (1+x)^(1/Ann_Level)-1
#Compare over same timeline, choose from 2004 and still active in 2023
#(first year start where all represented)
ASISA_active <- ASISA %>%
group_by(Fund) %>%
filter(min(date) < ymd(20050101)) %>%
filter(max(date) > ymd(20230901)) %>%
filter(date == last(date)) %>%
pull(Fund)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_1")
ASISA <- read_rds("data/ASISA_Rets.rds")
BM <- read_rds("data/Capped_SWIX.rds")
AI_Fund <- read_rds("data/AI_Max_Fund.rds")
feeconverter <- function(x, Ann_Level) (1+x)^(1/Ann_Level)-1
#Compare over same timeline, choose from 2004 and still active in 2023
#(first year start where all represented)
ASISA_active <- ASISA %>%
group_by(Fund) %>%
filter(min(date) < ymd(20050101)) %>%
filter(max(date) > ymd(20230901)) %>%
filter(date == max(date)) %>%
pull(Fund)
#We only wamt to look at ACTIVE managers
ASISA_avg_ret <- ASISA %>% filter(Index == "No" & FoF == "No") %>%
select(-Index, -FoF) %>%
mutate(Net_Return_150 = Returns - feeconverter(150*1e-4, 12),
No_Fee = Returns,
Net_Return_250 = Returns - feeconverter(250*1e-4, 12)) %>%
filter(Fund %in% ASISA_active) %>%
group_by(Fund) %>%
mutate(Roll_Return_150 = roll_prod(1 + Net_Return_150, 36, fill = NA, align = "right")^(12/36) - 1,
Roll_Return_0 = roll_prod(1 + No_Fee, 36, fill = NA, align = "right")^(12/36) - 1,
Roll_Return_250 = roll_prod(1 + Net_Return_250, 36, fill = NA, align = "right")^(12/36) - 1) %>%
group_by(date) %>%
filter(!is.na(Roll_Return_150)) %>%
pivot_longer(cols = c(Roll_Return_150, Roll_Return_0, Roll_Return_250),
names_to = "Return_Type",
values_to = "Roll_Return_Value") %>%
ggplot(aes(x = Roll_Return_Value, fill = Return_Type)) +
geom_density(alpha =0.6)+
labs(title = " Density of All Active Fund Returns + Fees vs AI",
subtitle = "Purple represents the return density of the AI Fund", x = "", y = "Density"
) + scale_colour_manual(labels = c("No Fee", "1.5% Fee", "2.5% Fee"))
fmxdat::theme_fmx()
AI_join <- AI_Fund %>%
filter(date > ymd(20040101)) %>%
mutate(Roll_Return_AI = roll_prod(1 + AI_Fund, 36, fill = NA, align = "right")^(12/36) - 1) %>%
filter(!is.na(Roll_Return_AI))
ASISA_avg_ret <- ASISA_avg_ret + geom_density(data = AI_join,
aes(x = Roll_Return_AI),
fill = "purple",
alpha = 0.6)
ASISA_avg_ret
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_6")
MAA <- read_rds("data/MAA.rds")
msci <- read_rds("data/msci.rds") %>%
filter(Name %in% c("MSCI_ACWI", "MSCI_USA", "MSCI_RE", "MSCI_Jap"))
#Combine the df's and add the constraint on the dates
Combined_df <- rbind(MAA %>% select(-Ticker), msci) %>%
filter(date >= ymd(20110101)) %>%
group_by(Name) %>%
filter(n_distinct(year(date)) >= 3) %>%
mutate(Year_Month = format(date, "%Y%B")) %>%
#Get last day of each month
arrange(date) %>%
group_by(Name, Year_Month) %>%
filter(date == max(date)) %>%
group_by(Name) %>%
#Calculate log returns
mutate(Returns = log(Price) - log(lag(Price))) %>%
filter(!is.na(Returns)) %>%
select(date, Name, Returns) %>%
spread(Name, Returns)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_6")
MAA <- read_rds("data/MAA.rds")
msci <- read_rds("data/msci.rds") %>%
filter(Name %in% c("MSCI_ACWI", "MSCI_USA", "MSCI_RE", "MSCI_Jap"))
#Combine the df's and add the constraint on the dates
Combined_df <- rbind(MAA %>% select(-Ticker), msci) %>%
filter(date >= ymd(20110101)) %>%
group_by(Name) %>%
filter(n_distinct(year(date)) >= 3) %>%
group_by(Name) %>%
#Calculate log returns
mutate(Returns = log(Price) - log(lag(Price))) %>%
filter(!is.na(Returns)) %>%
select(date, Name, Returns) %>%
spread(Name, Returns)
View(Optimise_Portfolio_ROI)
View(Port_Rebalancing)
row_categories <- c("Other", "Bonds & Credit", "Bonds & Credit",
"Bonds & Credit", "Bonds & Credit", "Bonds & Credit",
"Bonds & Credit", "Other", "Other", "Equities",
"Equities", "Equities", "Equities")
Opt_Weights_Now <- Optimise_Portfolio_ROI(data) %>%
mutate(Category = row_categories)
if(Markdown){
Tab <- knitr::kable(Opt_Weights_Now, format = "markdown",
caption = "Optimal Portfolio Weights in 2021",
col.names = c("Assets", "Weights", "Category"))
}else{
Tab <- knitr::kable(Opt_Weights_Now, format = "html",
caption = "Optimal Portfolio Weights in 2021",
col.names = c("Assets", "Weights", "Category")) %>%
kable_styling("striped", full_width = F, font_size = 12) %>%
column_spec(1, bold = T) %>%
footnote(general = "Own Calculations",
general_title = "Note: ",
footnote_as_chunk = T)
}
Markdown = FALSE
row_categories <- c("Other", "Bonds & Credit", "Bonds & Credit",
"Bonds & Credit", "Bonds & Credit", "Bonds & Credit",
"Bonds & Credit", "Other", "Other", "Equities",
"Equities", "Equities", "Equities")
Opt_Weights_Now <- Optimise_Portfolio_ROI(data) %>%
mutate(Category = row_categories)
if(Markdown){
Tab <- knitr::kable(Opt_Weights_Now, format = "markdown",
caption = "Optimal Portfolio Weights in 2021",
col.names = c("Assets", "Weights", "Category"))
}else{
Tab <- knitr::kable(Opt_Weights_Now, format = "html",
caption = "Optimal Portfolio Weights in 2021",
col.names = c("Assets", "Weights", "Category")) %>%
kable_styling("striped", full_width = F, font_size = 12) %>%
column_spec(1, bold = T) %>%
footnote(general = "Own Calculations",
general_title = "Note: ",
footnote_as_chunk = T)
}
row_categories <- c("Other", "Bonds & Credit", "Bonds & Credit",
"Bonds & Credit", "Bonds & Credit", "Bonds & Credit",
"Bonds & Credit", "Other", "Other", "Equities",
"Equities", "Equities", "Equities")
Opt_Weights_Now <- Optimise_Portfolio_ROI(data) %>%
mutate(Category = row_categories)
if(Markdown){
Tab <- knitr::kable(Opt_Weights_Now, format = "markdown",
caption = "Optimal Portfolio Weights in 2021",
col.names = c("Assets", "Weights", "Category"))
}else{
Tab <- knitr::kable(Opt_Weights_Now, format = "html",
caption = "Optimal Portfolio Weights in 2021",
col.names = c("Assets", "Weights", "Category")) %>%
kable_styling("striped", full_width = F, font_size = 12) %>%
column_spec(1, bold = T)
}
print(Tab)
View(Port_Rebalancing)
Rebalance_Dates <- Combined_df %>%
select(date) %>%
unique()
View(Rebalance_Dates)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_6")
MAA <- read_rds("data/MAA.rds")
msci <- read_rds("data/msci.rds") %>%
filter(Name %in% c("MSCI_ACWI", "MSCI_USA", "MSCI_RE", "MSCI_Jap"))
#Combine the df's and add the constraint on the dates
Combined_df <- rbind(MAA %>% select(-Ticker), msci) %>%
filter(date >= ymd(20110101)) %>%
group_by(Name) %>%
filter(n_distinct(year(date)) >= 3) %>%
group_by(Name) %>%
#Calculate log returns
mutate(Returns = log(Price) - log(lag(Price))) %>%
filter(!is.na(Returns)) %>%
select(date, Name, Returns) %>%
spread(Name, Returns)
View(Combined_df)
data = Combined_df
cutoff_date <- data %>% select(date) %>%
mutate(Cutoff = max(date) - years(3)) %>%
slice_head(n = 1) %>% pull(Cutoff)
return_mat_Nodate <- data %>% filter(date >= cutoff_date) %>%
select(-date) %>%
data.matrix(.)
Sigma_LW <- covEstimation(return_mat_Nodate, control = list(type = "lw"))
Mu <- Combined_df %>% filter(date >= cutoff_date) %>%
summarise(across(-date, ~exp(mean(log(1 + .))) - 1)) %>%
purrr::as_vector()
N_Assets <- ncol(return_mat_Nodate)
constraints <- rbind(
rep(1, N_Assets),  # Sum of weights = 1
diag(1, N_Assets), # Individual lower bounds
diag(-1, N_Assets), # Individual upper bounds
c(rep(0, 9), 1, 1, 1, 1),  # Equity weight ≤ 0.6
c(0, 1, 1, 1, 1, 1, 1, rep(0, 6)),  # Bond weight ≤ 0.25
c(1, rep(0, 6), 1, 1, rep(0, 4))
dir <- c(
rhs <- c(
1,                            # Total weight = 1
rep(0, N_Assets),             # Individual weights ≥ 0
rep(-0.4, N_Assets),           # Individual weights ≤ 0.4
0.6,                          # Equity group ≤ 0.6
0.25,                         # Bond group ≤ 0.25
0.15                          # Other group ≥ 0.15
)
opt_model <- OP(
Q_objective(Sigma_LW, -Mu),
L_constraint(L = constraints, dir = dir, rhs = rhs)
)
dir <- c(
"==",                         # Total weight = 1
rep(">=", N_Assets),          # Individual weights ≥ 0
rep(">=", N_Assets),          # Individual weights ≤ 0.4
"<=",                         # Equity group ≤ 0.6
"<=",                         # Bond group ≤ 0.25
">="                          # Other group ≥ 0.15
)
rhs <- c(
1,                            # Total weight = 1
rep(0, N_Assets),             # Individual weights ≥ 0
rep(-0.4, N_Assets),           # Individual weights ≤ 0.4
0.6,                          # Equity group ≤ 0.6
0.25,                         # Bond group ≤ 0.25
0.15                          # Other group ≥ 0.15
)
constraints <- rbind(
rep(1, N_Assets),  # Sum of weights = 1
diag(1, N_Assets), # Individual lower bounds
diag(-1, N_Assets), # Individual upper bounds
c(rep(0, 9), 1, 1, 1, 1),  # Equity weight ≤ 0.6
c(0, 1, 1, 1, 1, 1, 1, rep(0, 6)),  # Bond weight ≤ 0.25
c(1, rep(0, 6), 1, 1, rep(0, 4))    # Other weight ≥ 0.15
)
opt_model <- OP(
Q_objective(Sigma_LW, -Mu),
L_constraint(L = constraints, dir = dir, rhs = rhs)
)
solution <- ROI_solve(opt_model)
weights <- solution$solution
Optim_Port <- tibble(Name = colnames(return_mat_Nodate), Weight = round(weights, 5))
View(Optim_Port)
row_categories <- c("Other", "Bonds & Credit", "Bonds & Credit",
"Bonds & Credit", "Bonds & Credit", "Bonds & Credit",
"Bonds & Credit", "Other", "Other", "Equities",
"Equities", "Equities", "Equities")
Opt_Weights_Now <- Optimise_Portfolio_ROI(data) %>%
mutate(Category = row_categories)
Optimise_Portfolio_ROI <- function(data = Combined_df) {
cutoff_date <- data %>% select(date) %>%
mutate(Cutoff = max(date) - years(3)) %>%
slice_head(n = 1) %>% pull(Cutoff)
return_mat_Nodate <- data %>% filter(date >= cutoff_date) %>%
select(-date) %>%
data.matrix(.)
Sigma_LW <- covEstimation(return_mat_Nodate, control = list(type = "lw"))
Mu <- Combined_df %>% filter(date >= cutoff_date) %>%
summarise(across(-date, ~exp(mean(log(1 + .))) - 1)) %>%
purrr::as_vector()
N_Assets <- ncol(return_mat_Nodate)
# Define constraints
constraints <- rbind(
rep(1, N_Assets),  # Sum of weights = 1
diag(1, N_Assets), # Individual lower bounds
diag(-1, N_Assets), # Individual upper bounds
c(rep(0, 9), 1, 1, 1, 1),  # Equity weight ≤ 0.6
c(0, 1, 1, 1, 1, 1, 1, rep(0, 6)),  # Bond weight ≤ 0.25
c(1, rep(0, 6), 1, 1, rep(0, 4))    # Other weight ≥ 0.15
)
# Constraints directions
dir <- c(
"==",                         # Total weight = 1
rep(">=", N_Assets),          # Individual weights ≥ 0
rep(">=", N_Assets),          # Individual weights ≤ 0.4
"<=",                         # Equity group ≤ 0.6
"<=",                         # Bond group ≤ 0.25
">="                          # Other group ≥ 0.15
)
# RHS of constraints
rhs <- c(
1,                            # Total weight = 1
rep(0, N_Assets),             # Individual weights ≥ 0
rep(-0.4, N_Assets),           # Individual weights ≤ 0.4
0.6,                          # Equity group ≤ 0.6
0.25,                         # Bond group ≤ 0.25
0.15                          # Other group ≥ 0.15
)
# Build ROI Model
opt_model <- OP(
Q_objective(Sigma_LW, -Mu),
L_constraint(L = constraints, dir = dir, rhs = rhs)
)
# Solve optimization
solution <- ROI_solve(opt_model)
weights <- solution$solution
# Format and return results
Optim_Port <- tibble(Name = colnames(return_mat_Nodate), Weight = round(weights, 5))
return(Optim_Port)
}
row_categories <- c("Other", "Bonds & Credit", "Bonds & Credit",
"Bonds & Credit", "Bonds & Credit", "Bonds & Credit",
"Bonds & Credit", "Other", "Other", "Equities",
"Equities", "Equities", "Equities")
Opt_Weights_Now <- Optimise_Portfolio_ROI(data) %>%
mutate(Category = row_categories)
if(Markdown){
Tab <- knitr::kable(Opt_Weights_Now, format = "markdown",
caption = "Optimal Portfolio Weights in 2021",
col.names = c("Assets", "Weights", "Category"))
}else{
Tab <- knitr::kable(Opt_Weights_Now, format = "html",
caption = "Optimal Portfolio Weights in 2021",
col.names = c("Assets", "Weights", "Category")) %>%
kable_styling("striped", full_width = F, font_size = 12) %>%
column_spec(1, bold = T)
}
Markdown = FALSE
row_categories <- c("Other", "Bonds & Credit", "Bonds & Credit",
"Bonds & Credit", "Bonds & Credit", "Bonds & Credit",
"Bonds & Credit", "Other", "Other", "Equities",
"Equities", "Equities", "Equities")
Opt_Weights_Now <- Optimise_Portfolio_ROI(data) %>%
mutate(Category = row_categories)
if(Markdown){
Tab <- knitr::kable(Opt_Weights_Now, format = "markdown",
caption = "Optimal Portfolio Weights in 2021",
col.names = c("Assets", "Weights", "Category"))
}else{
Tab <- knitr::kable(Opt_Weights_Now, format = "html",
caption = "Optimal Portfolio Weights in 2021",
col.names = c("Assets", "Weights", "Category")) %>%
kable_styling("striped", full_width = F, font_size = 12) %>%
column_spec(1, bold = T)
}
Rebalance_Dates <- data %>%
select(date) %>%
unique() %>%
#Make sure there is available data
filter(date >= (min(date) + years(3))) %>%
#Choose Quaterly Rebalancing
filter(month(date) %in% c(3, 6, 9, 12)) %>%
pull(date)
Rebalance_Dates <- data %>%
select(date) %>%
unique() %>%
#Make sure there is available data
filter(date >= (min(date) + years(3))) %>%
#Choose Quaterly Rebalancing
group_by(year_month = floor_date(date, "month")) %>%
filter(date == max(date)) %>%
ungroup() %>%
select(-year_month)
filter(month(date) %in% c(3, 6, 9, 12)) %>%
pull(date)
View(Rebalance_Dates)
Rebalance_Dates <- data %>%
select(date) %>%
unique() %>%
#Make sure there is available data
filter(date >= (min(date) + years(3))) %>%
#Choose Quaterly Rebalancing
group_by(year_month = floor_date(date, "month")) %>%
filter(date == max(date)) %>%
ungroup() %>%
select(-year_month) %>%
filter(month(date) %in% c(3, 6, 9, 12)) %>%
pull(date)
print(Rebalance_Dates)
Weights_df <- tibble()
for (reb_date in Rebalance_Dates) {
#Only look at three years prior to rebalance
data_subset <- data %>% filter(date <= reb_date)
Weights <- Optimise_Portfolio_ROI(data_subset)
Weights <- Weights %>%
mutate(RebalancingDate = as.Date(reb_date))
Weights_df <- rbind(Weights_df, Weights)
}
View(Weights_df)
Plot_1 <- Weights_df %>% tbl_xts(., cols_to_xts = Weight, spread_by = Name) %>%
.[endpoints(.,'months')] %>% chart.StackedBar(main = "Optimal Weights of Portfolio",
ylab = "Weight (%)",
xlab = "Date",
col = c(brewer.pal(13, "Set3")),
legend.loc = "topright")
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_5")
cncy <- read_rds("data/currencies.rds")
cncy_value <- read_rds("data/cncy_value.rds")
cncyIV <- read_rds("data/cncyIV.rds")
Currencies_df <- cncy %>% group_by(Name) %>%
mutate(ROC = log(Price) - lag(log(Price))) %>%
filter(!is.na(ROC)) %>%
mutate(Name = gsub("\\_Cncy", "", Name)) %>%
mutate(Name = gsub("\\_Inv", "", Name))
View(Currencies_df)
