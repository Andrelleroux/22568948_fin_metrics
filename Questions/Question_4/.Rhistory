summarise(Avg_Weight = mean(Weight, na.rm = T)) %>%
arrange(desc(Avg_Weight))
Plot_2 <- Port_Holds %>% tbl_xts(., cols_to_xts = Weight, spread_by = Tickers)
#Make all NA values 0 as no weights at that point
Plot_2[is.na(Plot_2)] <- 0
#Gather again and get Top 8 most prevalent stocks
Plot_2 <- Plot_2 %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
group_by(Tickers) %>%
summarise(Avg_Weight = mean(Weight, na.rm = T)) %>%
arrange(desc(Avg_Weight))
Plot_2 <- Plot_2 %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
group_by(Tickers) %>%
summarise(Avg_Weight = mean(Weight, na.rm = T)) %>%
arrange(desc(Avg_Weight)) %>%
slice_head(8) %>%
pull(Tickers)
Plot_2 <- Port_Holds %>% tbl_xts(., cols_to_xts = Weight, spread_by = Tickers)
#Make all NA values 0 as no weights at that point
Plot_2[is.na(Plot_2)] <- 0
#Gather again and get Top 8 most prevalent stocks
Plot_2 <- Plot_2 %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
group_by(Tickers) %>%
summarise(Avg_Weight = mean(Weight, na.rm = T)) %>%
arrange(desc(Avg_Weight)) %>%
slice_head(n = 8) %>%
pull(Tickers)
Weight_xts <- Port_Holds %>% tbl_xts(., cols_to_xts = Weight, spread_by = Tickers)
#Make all NA values 0 as no weights at that point
Weight_xts[is.na(Weight_xts)] <- 0
#Gather again and get Top 8 most prevalent stocks
Top_Weights <- Weight_xts %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
group_by(Tickers) %>%
summarise(Avg_Weight = mean(Weight, na.rm = T)) %>%
arrange(desc(Avg_Weight)) %>%
slice_head(n = 8) %>%
pull(Tickers)
Plot_2 <- Weight_xts %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
mutate(Tickers = if_else(Tickers %in% Top_Weights, Tickers, "Other"))
Plot_2 <- Weight_xts %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
mutate(Tickers = if_else(Tickers %in% Top_Weights, Tickers, "Other")) %>%
tbl_xts(., cols_to_xts = Weight, spread_by = Tickers) %>%
.[endpoints(.,'months')] %>% chart.StackedBar(main = "Stacked Bar Chart of Stock Weights",
ylab = "Weight (%)",
xlab = "Date")
Plot_2 <- Weight_xts %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
mutate(Tickers = if_else(Tickers %in% Top_Weights, Tickers, "Other")) %>%
tbl_xts(., cols_to_xts = Weight, spread_by = Tickers)
Plot_2 <- Weight_xts %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
mutate(Tickers = if_else(Tickers %in% Top_Weights, Tickers, "Other")) %>%
group_by(date, Tickers) %>%
summarise(Weight = sum(Weight, na.rm = T)) %>%
tbl_xts(., cols_to_xts = Weight, spread_by = Tickers) %>%
.[endpoints(.,'months')] %>% chart.StackedBar(main = "Stacked Bar Chart of Stock Weights",
ylab = "Weight (%)",
xlab = "Date")
install.packages("RColorBrewer")
library(RColorBrewer)
Plot_2 <- Weight_xts %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
mutate(Tickers = if_else(Tickers %in% Top_Weights, Tickers, "Other")) %>%
group_by(date, Tickers) %>%
summarise(Weight = sum(Weight, na.rm = T)) %>%
tbl_xts(., cols_to_xts = Weight, spread_by = Tickers) %>%
.[endpoints(.,'months')] %>% chart.StackedBar(main = "Stacked Bar Chart of Stock Weights",
ylab = "Weight (%)",
xlab = "Date",
col = c(brewer.pal(8, "Set3"), "grey"))
Top_Weights <- Weight_xts %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
group_by(Tickers) %>%
summarise(Avg_Weight = mean(Weight, na.rm = T)) %>%
arrange(desc(Avg_Weight)) %>%
slice_head(n = 10) %>%
pull(Tickers)
#Create Other stock consisting of stocks not in Top
Plot_2 <- Weight_xts %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
mutate(Tickers = if_else(Tickers %in% Top_Weights, Tickers, "Other")) %>%
group_by(date, Tickers) %>%
summarise(Weight = sum(Weight, na.rm = T)) %>%
tbl_xts(., cols_to_xts = Weight, spread_by = Tickers) %>%
.[endpoints(.,'months')] %>% chart.StackedBar(main = "Stacked Bar Chart of Stock Weights",
ylab = "Weight (%)",
xlab = "Date",
col = c(brewer.pal(10, "Set3"), "grey"))
Plot_2 <- Weight_xts %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
mutate(Tickers = if_else(Tickers %in% Top_Weights, Tickers, "Other")) %>%
group_by(date, Tickers) %>%
summarise(Weight = sum(Weight, na.rm = T)) %>%
tbl_xts(., cols_to_xts = Weight, spread_by = Tickers) %>%
.[endpoints(.,'months')] %>% chart.StackedBar(main = "Stacked Bar Chart of Stock Weights",
ylab = "Weight (%)",
xlab = "Date",
col = c(brewer.pal(10, "Set3"), "forestgreen"))
Plot_2 <- Weight_xts %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
mutate(Tickers = if_else(Tickers %in% Top_Weights, Tickers, "Other")) %>%
group_by(date, Tickers) %>%
summarise(Weight = sum(Weight, na.rm = T)) %>%
tbl_xts(., cols_to_xts = Weight, spread_by = Tickers) %>%
.[endpoints(.,'months')] %>% chart.StackedBar(main = "Stacked Bar Chart of Stock Weights",
ylab = "Weight (%)",
xlab = "Date",
col = c(brewer.pal(11, "Set3")))
Port_Holds <- read_rds("data/Fund_Holds.rds")
library(tidyverse)
Port_Holds <- read_rds("data/Fund_Holds.rds")
BM_Holds <- read_rds("data/BM_Holds.rds") %>% select(Tickers, Sector) %>%
unique()
Plot_1 <- left_join(Port_Holds, BM_Holds, by = "Tickers", relationship = "many-to-many") %>%
group_by(Sector, date) %>%
summarise(TotalWeight = sum(Weight), .groups = "drop") %>%
group_by(date) %>%
mutate(PercentWeight = TotalWeight / sum(TotalWeight)) %>%
ggplot(aes(date, PercentWeight, fill = Sector)) +
geom_area(alpha = 0.7) +
scale_y_continuous(labels = scales::percent) +
labs(
title = "Sector Breakdown Over Time",
x = "Date",
y = "Portfolio Share (%)",
fill = "Sector"
) +
fmxdat::theme_fmx()
Plot_1
library(tidyverse)
library(tbl2xts)
library(PerformanceAnalytics)
library(RColorBrewer)
Port_Holds <- read_rds("data/Fund_Holds.rds")
Weight_xts <- Port_Holds %>% tbl_xts(., cols_to_xts = Weight, spread_by = Tickers)
#Make all NA values 0 as no weights at that point
Weight_xts[is.na(Weight_xts)] <- 0
#Gather again and get Top 8 most prevalent stocks
Top_Weights <- Weight_xts %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
group_by(Tickers) %>%
summarise(Avg_Weight = mean(Weight, na.rm = T)) %>%
arrange(desc(Avg_Weight)) %>%
slice_head(n = 10) %>%
pull(Tickers)
#Create Other stock consisting of stocks not in Top
Plot_2 <- Weight_xts %>% xts_tbl() %>%
gather(Tickers, Weight, -date) %>%
mutate(Tickers = if_else(Tickers %in% Top_Weights, Tickers, "Other")) %>%
group_by(date, Tickers) %>%
summarise(Weight = sum(Weight, na.rm = T)) %>%
tbl_xts(., cols_to_xts = Weight, spread_by = Tickers) %>%
.[endpoints(.,'months')] %>% chart.StackedBar(main = "Stacked Bar Chart of Stock Weights",
ylab = "Weight (%)",
xlab = "Date",
col = c(brewer.pal(11, "Set3")))
library(tidyverse)
library(PerformanceAnalytics)
library(tbl2xts)
library(gt)
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
Tracking_Error_df <- left_join(BM_Rets, Port_Rets %>% select(-Portolio), by = "date") %>%
mutate(Diff = Returns - BM)
Track_Error <- round(sd(Tracking_Error_df$Diff),6)
tabDownside <- table.DownsideRisk(Port_Rets %>% tbl_xts(.), ci = 0.95, Rf=0, MAR=0)
tabDownside <- tabDownside[c(1,3,5,7:9),]
Measures <- c("Semi Deviation", "Loss Deviation", "Downside Deviation (Rf = 0%)",
"Maximum Drawdown", "Historical VaR (95%)", "Historical ES (95%)",
"Tracking Error to Benchmark")
tabDownside %>% data.frame() %>% rbind(Track_Error) %>% cbind(Measures) %>%
tibble::rownames_to_column() %>%
gt() %>%
cols_move_to_start(Measures) %>%
tab_header(title = glue::glue("Downside Risk Estimates")) %>%
fmt_percent(
columns = 2,
decimals = 2
)
library(tidyverse)
Port_Holds <- read_rds("data/Fund_Holds.rds")
BM_Holds <- read_rds("data/BM_Holds.rds")
View(BM_Holds)
View(Port_Holds)
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
View(Port_Rets)
View(BM_Rets)
View(BM_Holds)
View(Port_Holds)
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
# Merge the two data frames by date
df <- Port_Rets %>%
Left_join(., BM_Rets, by = "date") %>%
#Excess Returns
mutate(Excess_Returns = Portfolio_Returns - Benchmark_Returns)
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
# Merge the two data frames by date
df <- Port_Rets %>%
left_join(., BM_Rets, by = "date") %>%
#Excess Returns
mutate(Excess_Returns = Portfolio_Returns - Benchmark_Returns)
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
# Merge the two data frames by date
df <- Port_Rets %>%
left_join(., BM_Rets, by = "date") %>%
#Excess Returns
mutate(Excess_Returns = Returns - BM)
# Calculate rolling mean and standard deviation of excess returns
rolling_window <- 12
df <- df %>%
mutate(
Rolling_Mean = rollmean(Excess_Returns, rolling_window, fill = NA, align = "right"),
Rolling_SD = rollapply(Excess_Returns, rolling_window, sd, fill = NA, align = "right"),
Information_Ratio = Rolling_Mean / Rolling_SD  # Calculate IR
)
library(dplyr)
library(ggplot2)
library(zoo)
library(RcppRoll)
Relative_Performance <- function(){
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
# Merge the two data frames by date
df <- Port_Rets %>%
left_join(., BM_Rets, by = "date") %>%
#Excess Returns
mutate(Excess_Returns = Returns - BM)
# Calculate rolling mean and standard deviation of excess returns
rolling_window <- 12
df <- df %>%
mutate(
Rolling_Mean = rollmean(Excess_Returns, rolling_window, fill = NA, align = "right"),
Rolling_SD = rollapply(Excess_Returns, rolling_window, sd, fill = NA, align = "right"),
Information_Ratio = Rolling_Mean / Rolling_SD  # Calculate IR
)
# Plot the rolling Information Ratio
Plot_Info <- ggplot(df, aes(x = date, y = Information_Ratio)) +
geom_line(color = "darkgreen", size = 1) +
labs(
title = "Rolling Information Ratio Over Time",
x = "Date",
y = "Information Ratio"
) +
fmxdat::theme_fmx()
Plot_Info
Plot_Info
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
# Merge the two data frames by date
df <- Port_Rets %>%
left_join(., BM_Rets, by = "date") %>%
#Excess Returns
mutate(Excess_Returns = Returns - BM)
# Calculate rolling mean and standard deviation of excess returns
rolling_window <- 12
df <- df %>%
mutate(
Rolling_Mean = rollmean(Excess_Returns, rolling_window, fill = NA, align = "right"),
Rolling_SD = rollapply(Excess_Returns, rolling_window, sd, fill = NA, align = "right"),
Information_Ratio = Rolling_Mean / Rolling_SD  # Calculate IR
)
# Plot the rolling Information Ratio
Plot_Info <- ggplot(df, aes(x = date, y = Information_Ratio)) +
geom_line(color = "darkgreen", size = 1) +
labs(
title = "Rolling Information Ratio Over Time",
x = "Date",
y = "Information Ratio"
) +
fmxdat::theme_fmx()
Plot_Info
Plot_Info
library(dplyr)
library(ggplot2)
library(zoo)
library(RcppRoll)
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
# Merge the two data frames by date
df <- Port_Rets %>%
left_join(., BM_Rets, by = "date") %>%
#Excess Returns
mutate(Excess_Returns = Returns - BM)
# Calculate rolling mean and standard deviation of excess returns
rolling_window <- 12
df <- df %>%
mutate(
Rolling_Mean = rollmean(Excess_Returns, rolling_window, fill = NA, align = "right"),
Rolling_SD = rollapply(Excess_Returns, rolling_window, sd, fill = NA, align = "right"),
Information_Ratio = Rolling_Mean / Rolling_SD  # Calculate IR
)
clear
Port_Rets <- read_rds("data/Fund_Rets.rds")
library(dplyr)
library(ggplot2)
library(zoo)
library(RcppRoll)
Port_Rets <- read_rds("data/Fund_Rets.rds")
library(tidyverse)
library(zoo)
library(RcppRoll)
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
# Merge the two data frames by date
df <- Port_Rets %>%
left_join(., BM_Rets, by = "date") %>%
#Excess Returns
mutate(Excess_Returns = Returns - BM)
# Calculate rolling mean and standard deviation of excess returns
rolling_window <- 12
df <- df %>%
mutate(
Rolling_Mean = rollmean(Excess_Returns, rolling_window, fill = NA, align = "right"),
Rolling_SD = rollapply(Excess_Returns, rolling_window, sd, fill = NA, align = "right"),
Information_Ratio = Rolling_Mean / Rolling_SD  # Calculate IR
)
# Plot the rolling Information Ratio
Plot_Info <- ggplot(df, aes(x = date, y = Information_Ratio)) +
geom_line(color = "darkgreen", size = 1) +
labs(
title = "Rolling Information Ratio Over Time",
x = "Date",
y = "Information Ratio"
) +
fmxdat::theme_fmx()
Plot_Info
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
# Merge the two data frames by date
df <- Port_Rets %>%
left_join(., BM_Rets, by = "date") %>%
#Excess Returns
mutate(Excess_Returns = Returns - BM)
# Calculate rolling mean and standard deviation of excess returns
rolling_window <- 12
df <- df %>%
mutate(
Rolling_Mean = rollmean(Excess_Returns, rolling_window, fill = NA, align = "right"),
Rolling_SD = rollapply(Excess_Returns, rolling_window, sd, fill = NA, align = "right"),
Information_Ratio = Rolling_Mean / Rolling_SD  # Calculate IR
) %>% filter(!is.na(Rolling_Mean))
# Plot the rolling Information Ratio
Plot_Info <- ggplot(df, aes(x = date, y = Information_Ratio)) +
geom_line(color = "darkgreen", size = 1) +
labs(
title = "Rolling Information Ratio Over Time",
x = "Date",
y = "Information Ratio"
) +
fmxdat::theme_fmx()
Plot_Info
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_4")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
pacman::p_load(RcppRoll, tidyverse, zoo, gt, PerformanceAnalytics, tbl2xts, RColorBrewer)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_4")
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
pacman::p_load(RcppRoll, tidyverse, zoo, gt, PerformanceAnalytics, tbl2xts, RColorBrewer)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_4")
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Risk_table <- Tracking_Error_Table()
Risk_table
install.packages("flextable")
library(flextable)
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
pacman::p_load(RcppRoll, tidyverse, zoo, gt, PerformanceAnalytics, tbl2xts, RColorBrewer)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_4")
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Risk_table <- Tracking_Error_Table()
tabDownside %>% data.frame() %>% rbind(Track_Error) %>% cbind(Measures) %>%
tibble::rownames_to_column()
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
Tracking_Error_df <- left_join(BM_Rets, Port_Rets %>% select(-Portolio), by = "date") %>%
mutate(Diff = Returns - BM)
Track_Error <- round(sd(Tracking_Error_df$Diff),6)
tabDownside <- table.DownsideRisk(Port_Rets %>% tbl_xts(.), ci = 0.95, Rf=0, MAR=0)
tabDownside <- tabDownside[c(1,3,5,7:9),]
Measures <- c("Semi Deviation", "Loss Deviation", "Downside Deviation (Rf = 0%)",
"Maximum Drawdown", "Historical VaR (95%)", "Historical ES (95%)",
"Tracking Error to Benchmark")
tabDownside %>% data.frame() %>% rbind(Track_Error) %>% cbind(Measures) %>%
tibble::rownames_to_column()
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
Tracking_Error_df <- left_join(BM_Rets, Port_Rets %>% select(-Portolio), by = "date") %>%
mutate(Diff = Returns - BM)
Track_Error <- round(sd(Tracking_Error_df$Diff),6)
tabDownside <- table.DownsideRisk(Port_Rets %>% tbl_xts(.), ci = 0.95, Rf=0, MAR=0)
tabDownside <- tabDownside[c(1,3,5,7:9),]
Measures <- c("Semi Deviation", "Loss Deviation", "Downside Deviation (Rf = 0%)",
"Maximum Drawdown", "Historical VaR (95%)", "Historical ES (95%)",
"Tracking Error to Benchmark")
tabDownside %>% tabDownside %>% as.data.frame() %>% rbind(Track_Error) %>% cbind(Measures) %>%
tibble::rownames_to_column()
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
Tracking_Error_df <- left_join(BM_Rets, Port_Rets %>% select(-Portolio), by = "date") %>%
mutate(Diff = Returns - BM)
Track_Error <- round(sd(Tracking_Error_df$Diff),6)
tabDownside <- table.DownsideRisk(Port_Rets %>% tbl_xts(.), ci = 0.95, Rf=0, MAR=0)
tabDownside_1 <- tabDownside[c(1,3,5,7:9),]
Measures <- c("Semi Deviation", "Loss Deviation", "Downside Deviation (Rf = 0%)",
"Maximum Drawdown", "Historical VaR (95%)", "Historical ES (95%)",
"Tracking Error to Benchmark")
tabDownside_2 %>% tabDownside_1 %>% as.data.frame() %>% rbind(Track_Error) %>% cbind(Measures) %>%
tibble::rownames_to_column()
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
Tracking_Error_df <- left_join(BM_Rets, Port_Rets %>% select(-Portolio), by = "date") %>%
mutate(Diff = Returns - BM)
Track_Error <- round(sd(Tracking_Error_df$Diff),6)
tabDownside <- table.DownsideRisk(Port_Rets %>% tbl_xts(.), ci = 0.95, Rf=0, MAR=0)
tabDownside_1 <- tabDownside[c(1,3,5,7:9),]
Measures <- c("Semi Deviation", "Loss Deviation", "Downside Deviation (Rf = 0%)",
"Maximum Drawdown", "Historical VaR (95%)", "Historical ES (95%)",
"Tracking Error to Benchmark")
tabDownside_2 <- tabDownside_1 %>% as.data.frame() %>% rbind(Track_Error) %>% cbind(Measures) %>%
tibble::rownames_to_column()
View(tabDownside_2)
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
Tracking_Error_df <- left_join(BM_Rets, Port_Rets %>% select(-Portolio), by = "date") %>%
mutate(Diff = Returns - BM)
Track_Error <- round(sd(Tracking_Error_df$Diff),6)
tabDownside <- table.DownsideRisk(Port_Rets %>% tbl_xts(.), ci = 0.95, Rf=0, MAR=0)
tabDownside_1 <- tabDownside[c(1,3,5,7:9),]
Measures <- c("Semi Deviation", "Loss Deviation", "Downside Deviation (Rf = 0%)",
"Maximum Drawdown", "Historical VaR (95%)", "Historical ES (95%)",
"Tracking Error to Benchmark")
tabDownside_2 <- tabDownside_1 %>% as.data.frame() %>% rbind(Track_Error) %>% cbind(Measures) %>%
tibble::rownames_to_column() %>% rename(Result = ".") %>% select(Measures, Result)
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
Tracking_Error_df <- left_join(BM_Rets, Port_Rets %>% select(-Portolio), by = "date") %>%
mutate(Diff = Returns - BM)
Track_Error <- round(sd(Tracking_Error_df$Diff),6)
tabDownside <- table.DownsideRisk(Port_Rets %>% tbl_xts(.), ci = 0.95, Rf=0, MAR=0)
tabDownside_1 <- tabDownside[c(1,3,5,7:9),]
Measures <- c("Semi Deviation", "Loss Deviation", "Downside Deviation (Rf = 0%)",
"Maximum Drawdown", "Historical VaR (95%)", "Historical ES (95%)",
"Tracking Error to Benchmark")
tabDownside_2 <- tabDownside_1 %>% as.data.frame() %>% rbind(Track_Error) %>% cbind(Measures) %>%
tibble::rownames_to_column() %>% rename(Result = ".") %>% select(Measures, Result)
if(Markdown){
Tab <- knitr::kable(tabDownside_2, format = "markdown",
caption = "Relative Risk Measures",
col.names = c("SnakeOil Capital"))
}else{
Tab <- flextable(tabDownside_2)
}
Markdown = FALSE
Port_Rets <- read_rds("data/Fund_Rets.rds")
BM_Rets <- read_rds("data/BM_Rets.rds")
Tracking_Error_df <- left_join(BM_Rets, Port_Rets %>% select(-Portolio), by = "date") %>%
mutate(Diff = Returns - BM)
Track_Error <- round(sd(Tracking_Error_df$Diff),6)
tabDownside <- table.DownsideRisk(Port_Rets %>% tbl_xts(.), ci = 0.95, Rf=0, MAR=0)
tabDownside_1 <- tabDownside[c(1,3,5,7:9),]
Measures <- c("Semi Deviation", "Loss Deviation", "Downside Deviation (Rf = 0%)",
"Maximum Drawdown", "Historical VaR (95%)", "Historical ES (95%)",
"Tracking Error to Benchmark")
tabDownside_2 <- tabDownside_1 %>% as.data.frame() %>% rbind(Track_Error) %>% cbind(Measures) %>%
tibble::rownames_to_column() %>% rename(Result = ".") %>% select(Measures, Result)
if(Markdown){
Tab <- knitr::kable(tabDownside_2, format = "markdown",
caption = "Relative Risk Measures",
col.names = c("SnakeOil Capital"))
}else{
Tab <- flextable(tabDownside_2)
}
Risk_table <- Tracking_Error_Table()
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
pacman::p_load(RcppRoll, tidyverse, zoo, gt, PerformanceAnalytics, tbl2xts, RColorBrewer)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_4")
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Risk_table <- Tracking_Error_Table()
Risk_table
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
pacman::p_load(RcppRoll, tidyverse, zoo, gt, PerformanceAnalytics, tbl2xts, RColorBrewer)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_4")
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Risk_table <- Tracking_Error_Table()
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
pacman::p_load(RcppRoll, tidyverse, zoo, gt, PerformanceAnalytics, tbl2xts, RColorBrewer)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_4")
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Risk_table <- Tracking_Error_Table()
Risk_table
Port_Rets <- read_rds("data/Fund_Rets.rds")
View(Port_Rets)
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
pacman::p_load(RcppRoll, tidyverse, zoo, gt, PerformanceAnalytics, tbl2xts, RColorBrewer)
setwd("~/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_4")
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Risk_table <- Tracking_Error_Table()
Risk_table
Plot_Perf <- Relative_Performance()
Plot_Perf
Plot_Sector <- Sector_Pie()
Plot_Sector
Plot_Weights <- Weights_StackBar()
Plot_Weights
