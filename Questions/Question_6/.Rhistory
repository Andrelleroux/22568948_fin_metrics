)
# Build ROI Model
opt_model <- OP(
Q_objective(Sigma_LW, -Mu),
L_constraint(L = constraints, dir = dir, rhs = rhs)
)
# Solve optimization
solution <- ROI_solve(opt_model)
cutoff_date <- Combined_df %>% select(date) %>%
mutate(Cutoff = max(date) - years(3)) %>%
slice_head(n = 1) %>% pull(Cutoff)
return_mat_Nodate <- Combined_df %>% filter(date >= cutoff_date) %>%
data.matrix(.[, -1])
Sigma_LW <- covEstimation(return_mat_Nodate, control = list(type = "lw"))
print(Sigma_LW)
return_mat_Nodate <- Combined_df %>% filter(date >= cutoff_date) %>%
data.matrix(.[, -1])
Sigma_LW <- covEstimation(return_mat_Nodate, control = list(type = "lw"))
return_mat_Nodate <- Combined_df %>% filter(date >= cutoff_date) %>%
select(-date) %>%
data.matrix(.)
Sigma_LW <- covEstimation(return_mat_Nodate, control = list(type = "lw"))
cutoff_date <- Combined_df %>% select(date) %>%
mutate(Cutoff = max(date) - years(3)) %>%
slice_head(n = 1) %>% pull(Cutoff)
return_mat_Nodate <- Combined_df %>% filter(date >= cutoff_date) %>%
select(-date) %>%
data.matrix(.)
Sigma_LW <- covEstimation(return_mat_Nodate, control = list(type = "lw"))
Mu <- Combined_df %>% filter(date >= cutoff_date) %>%
summarise(across(-date, ~exp(mean(log(1 + .))) - 1)) %>%
purrr::as_vector()
N_Assets <- ncol(return_mat_Nodate)
# Define constraints
constraints <- rbind(
rep(1, N_Assets),  # Sum of weights = 1
diag(1, N_Assets), # Individual lower bounds
-diag(1, N_Assets), # Individual upper bounds
c(rep(0, 9), 1, 1, 1, 1),  # Equity weight ≤ 0.6
c(0, 1, 1, 1, 1, 1, 1, rep(0, 6)),  # Bond weight ≤ 0.25
c(1, rep(0, 6), 1, 1, rep(0, 4))    # Other weight ≥ 0.15
)
# Constraints directions
dir <- c(
"==",                         # Total weight = 1
rep(">=", N_Assets),          # Individual weights ≥ 0
rep("<=", N_Assets),          # Individual weights ≤ 0.4
"<=",                         # Equity group ≤ 0.6
"<=",                         # Bond group ≤ 0.25
">="                          # Other group ≥ 0.15
)
# RHS of constraints
rhs <- c(
1,                            # Total weight = 1
rep(0, N_Assets),             # Individual weights ≥ 0
rep(0.4, N_Assets),           # Individual weights ≤ 0.4
0.6,                          # Equity group ≤ 0.6
0.25,                         # Bond group ≤ 0.25
0.15                          # Other group ≥ 0.15
)
# Build ROI Model
opt_model <- OP(
Q_objective(Sigma_LW, -Mu),
L_constraint(L = constraints, dir = dir, rhs = rhs)
)
# Solve optimization
solution <- ROI_solve(opt_model)
weights <- solution$solution
# Format and return results
Optim_Port <- tibble(Name = colnames(return_mat_Nodate), Weight = round(weights, 5))
View(Optim_Port)
cutoff_date <- Combined_df %>% select(date) %>%
mutate(Cutoff = max(date) - years(3)) %>%
slice_head(n = 1) %>% pull(Cutoff)
return_mat_Nodate <- Combined_df %>% filter(date >= cutoff_date) %>%
select(-date) %>%
data.matrix(.)
Sigma_LW <- covEstimation(return_mat_Nodate, control = list(type = "lw"))
Mu <- Combined_df %>% filter(date >= cutoff_date) %>%
summarise(across(-date, ~exp(mean(log(1 + .))) - 1)) %>%
purrr::as_vector()
N_Assets <- ncol(return_mat_Nodate)
# Define constraints
constraints <- rbind(
rep(1, N_Assets),  # Sum of weights = 1
diag(1, N_Assets), # Individual lower bounds
-diag(1, N_Assets), # Individual upper bounds
c(rep(0, 9), 1, 1, 1, 1),  # Equity weight ≤ 0.6
c(0, 1, 1, 1, 1, 1, 1, rep(0, 6)),  # Bond weight ≤ 0.25
c(1, rep(0, 6), 1, 1, rep(0, 4))    # Other weight ≥ 0.15
)
# Constraints directions
dir <- c(
"==",                         # Total weight = 1
rep(">=", N_Assets),          # Individual weights ≥ 0
rep("<=", N_Assets),          # Individual weights ≤ 0.4
"<=",                         # Equity group ≤ 0.6
"<=",                         # Bond group ≤ 0.25
">="                          # Other group ≥ 0.15
)
# RHS of constraints
rhs <- c(
1,                            # Total weight = 1
rep(0, N_Assets),             # Individual weights ≥ 0
rep(0.4, N_Assets),           # Individual weights ≤ 0.4
0.6,                          # Equity group ≤ 0.6
0.25,                         # Bond group ≤ 0.25
0.15                          # Other group ≥ 0.15
)
# Build ROI Model
opt_model <- OP(
Q_objective(Sigma_LW, -Mu),
L_constraint(L = constraints, dir = dir, rhs = rhs)
)
# Solve optimization
solution <- ROI_solve(opt_model)
weights <- solution$solution
# Format and return results
Optim_Port <- tibble(Name = colnames(return_mat_Nodate), Weight = round(weights, 5))
View(Optim_Port)
cutoff_date <- Combined_df %>% select(date) %>%
mutate(Cutoff = max(date) - years(3)) %>%
slice_head(n = 1) %>% pull(Cutoff)
return_mat_Nodate <- Combined_df %>% filter(date >= cutoff_date) %>%
select(-date) %>%
data.matrix(.)
Sigma_LW <- covEstimation(return_mat_Nodate, control = list(type = "lw"))
Mu <- Combined_df %>% filter(date >= cutoff_date) %>%
summarise(across(-date, ~exp(mean(log(1 + .))) - 1)) %>%
purrr::as_vector()
N_Assets <- ncol(return_mat_Nodate)
# Define constraints
constraints <- rbind(
rep(1, N_Assets),  # Sum of weights = 1
diag(1, N_Assets), # Individual lower bounds
diag(-1, N_Assets), # Individual upper bounds
c(rep(0, 9), 1, 1, 1, 1),  # Equity weight ≤ 0.6
c(0, 1, 1, 1, 1, 1, 1, rep(0, 6)),  # Bond weight ≤ 0.25
c(1, rep(0, 6), 1, 1, rep(0, 4))    # Other weight ≥ 0.15
)
# Constraints directions
dir <- c(
"==",                         # Total weight = 1
rep(">=", N_Assets),          # Individual weights ≥ 0
rep("<=", N_Assets),          # Individual weights ≤ 0.4
"<=",                         # Equity group ≤ 0.6
"<=",                         # Bond group ≤ 0.25
">="                          # Other group ≥ 0.15
)
# RHS of constraints
rhs <- c(
1,                            # Total weight = 1
rep(0, N_Assets),             # Individual weights ≥ 0
rep(0.4, N_Assets),           # Individual weights ≤ 0.4
0.6,                          # Equity group ≤ 0.6
0.25,                         # Bond group ≤ 0.25
0.15                          # Other group ≥ 0.15
)
# Build ROI Model
opt_model <- OP(
Q_objective(Sigma_LW, -Mu),
L_constraint(L = constraints, dir = dir, rhs = rhs)
)
# Solve optimization
solution <- ROI_solve(opt_model)
weights <- solution$solution
# Format and return results
Optim_Port <- tibble(Name = colnames(return_mat_Nodate), Weight = round(weights, 5))
View(Optim_Port)
cutoff_date <- Combined_df %>% select(date) %>%
mutate(Cutoff = max(date) - years(3)) %>%
slice_head(n = 1) %>% pull(Cutoff)
return_mat_Nodate <- Combined_df %>% filter(date >= cutoff_date) %>%
select(-date) %>%
data.matrix(.)
Sigma_LW <- covEstimation(return_mat_Nodate, control = list(type = "lw"))
Mu <- Combined_df %>% filter(date >= cutoff_date) %>%
summarise(across(-date, ~exp(mean(log(1 + .))) - 1)) %>%
purrr::as_vector()
N_Assets <- ncol(return_mat_Nodate)
# Define constraints
constraints <- rbind(
rep(1, N_Assets),  # Sum of weights = 1
diag(1, N_Assets), # Individual lower bounds
diag(-1, N_Assets), # Individual upper bounds
c(rep(0, 9), 1, 1, 1, 1),  # Equity weight ≤ 0.6
c(0, 1, 1, 1, 1, 1, 1, rep(0, 6)),  # Bond weight ≤ 0.25
c(1, rep(0, 6), 1, 1, rep(0, 4))    # Other weight ≥ 0.15
)
# Constraints directions
dir <- c(
"==",                         # Total weight = 1
rep(">=", N_Assets),          # Individual weights ≥ 0
rep("<=", N_Assets),          # Individual weights ≤ 0.4
"<=",                         # Equity group ≤ 0.6
"<=",                         # Bond group ≤ 0.25
">="                          # Other group ≥ 0.15
)
# RHS of constraints
rhs <- c(
1,                            # Total weight = 1
rep(0, N_Assets),             # Individual weights ≥ 0
rep(-0.4, N_Assets),           # Individual weights ≤ 0.4
0.6,                          # Equity group ≤ 0.6
0.25,                         # Bond group ≤ 0.25
0.15                          # Other group ≥ 0.15
)
# Build ROI Model
opt_model <- OP(
Q_objective(Sigma_LW, -Mu),
L_constraint(L = constraints, dir = dir, rhs = rhs)
)
# Solve optimization
solution <- ROI_solve(opt_model)
weights <- solution$solution
# Format and return results
Optim_Port <- tibble(Name = colnames(return_mat_Nodate), Weight = round(weights, 5))
View(Optim_Port)
cutoff_date <- Combined_df %>% select(date) %>%
mutate(Cutoff = max(date) - years(3)) %>%
slice_head(n = 1) %>% pull(Cutoff)
return_mat_Nodate <- Combined_df %>% filter(date >= cutoff_date) %>%
select(-date) %>%
data.matrix(.)
Sigma_LW <- covEstimation(return_mat_Nodate, control = list(type = "lw"))
Mu <- Combined_df %>% filter(date >= cutoff_date) %>%
summarise(across(-date, ~exp(mean(log(1 + .))) - 1)) %>%
purrr::as_vector()
N_Assets <- ncol(return_mat_Nodate)
# Define constraints
constraints <- rbind(
rep(1, N_Assets),  # Sum of weights = 1
diag(1, N_Assets), # Individual lower bounds
diag(-1, N_Assets), # Individual upper bounds
c(rep(0, 9), 1, 1, 1, 1),  # Equity weight ≤ 0.6
c(0, 1, 1, 1, 1, 1, 1, rep(0, 6)),  # Bond weight ≤ 0.25
c(1, rep(0, 6), 1, 1, rep(0, 4))    # Other weight ≥ 0.15
)
# Constraints directions
dir <- c(
"==",                         # Total weight = 1
rep(">=", N_Assets),          # Individual weights ≥ 0
rep(">=", N_Assets),          # Individual weights ≤ 0.4
"<=",                         # Equity group ≤ 0.6
"<=",                         # Bond group ≤ 0.25
">="                          # Other group ≥ 0.15
)
# RHS of constraints
rhs <- c(
1,                            # Total weight = 1
rep(0, N_Assets),             # Individual weights ≥ 0
rep(-0.4, N_Assets),           # Individual weights ≤ 0.4
0.6,                          # Equity group ≤ 0.6
0.25,                         # Bond group ≤ 0.25
0.15                          # Other group ≥ 0.15
)
# Build ROI Model
opt_model <- OP(
Q_objective(Sigma_LW, -Mu),
L_constraint(L = constraints, dir = dir, rhs = rhs)
)
# Solve optimization
solution <- ROI_solve(opt_model)
weights <- solution$solution
# Format and return results
Optim_Port <- tibble(Name = colnames(return_mat_Nodate), Weight = round(weights, 5))
View(Optim_Port)
Rebalance_Dates <- Combined_df %>%
select(date) %>%
unique() %>%
filter(month(date) %in% c(3, 6, 9, 12))
View(Rebalance_Dates)
Weights_df <- tibble()
Rebalance_Dates <- Combined_df %>%
select(date) %>%
unique() %>%
filter(date >= (first(date) + years(3))) %>%
filter(month(date) %in% c(3, 6, 9, 12)) %>%
pull(dates)
Rebalance_Dates <- Combined_df %>%
select(date) %>%
unique() %>%
filter(date >= (first(date) + years(3))) %>%
filter(month(date) %in% c(3, 6, 9, 12)) %>%
pull(date)
View(Optim_Port)
Optimise_Portfolio_ROI <- function(data = Combined_df) {
cutoff_date <- Combined_df %>% select(date) %>%
mutate(Cutoff = max(date) - years(3)) %>%
slice_head(n = 1) %>% pull(Cutoff)
return_mat_Nodate <- Combined_df %>% filter(date >= cutoff_date) %>%
select(-date) %>%
data.matrix(.)
Sigma_LW <- covEstimation(return_mat_Nodate, control = list(type = "lw"))
Mu <- Combined_df %>% filter(date >= cutoff_date) %>%
summarise(across(-date, ~exp(mean(log(1 + .))) - 1)) %>%
purrr::as_vector()
N_Assets <- ncol(return_mat_Nodate)
# Define constraints
constraints <- rbind(
rep(1, N_Assets),  # Sum of weights = 1
diag(1, N_Assets), # Individual lower bounds
diag(-1, N_Assets), # Individual upper bounds
c(rep(0, 9), 1, 1, 1, 1),  # Equity weight ≤ 0.6
c(0, 1, 1, 1, 1, 1, 1, rep(0, 6)),  # Bond weight ≤ 0.25
c(1, rep(0, 6), 1, 1, rep(0, 4))    # Other weight ≥ 0.15
)
# Constraints directions
dir <- c(
"==",                         # Total weight = 1
rep(">=", N_Assets),          # Individual weights ≥ 0
rep(">=", N_Assets),          # Individual weights ≤ 0.4
"<=",                         # Equity group ≤ 0.6
"<=",                         # Bond group ≤ 0.25
">="                          # Other group ≥ 0.15
)
# RHS of constraints
rhs <- c(
1,                            # Total weight = 1
rep(0, N_Assets),             # Individual weights ≥ 0
rep(-0.4, N_Assets),           # Individual weights ≤ 0.4
0.6,                          # Equity group ≤ 0.6
0.25,                         # Bond group ≤ 0.25
0.15                          # Other group ≥ 0.15
)
# Build ROI Model
opt_model <- OP(
Q_objective(Sigma_LW, -Mu),
L_constraint(L = constraints, dir = dir, rhs = rhs)
)
# Solve optimization
solution <- ROI_solve(opt_model)
weights <- solution$solution
# Format and return results
Optim_Port <- tibble(Name = colnames(return_mat_Nodate), Weight = round(weights, 5))
return(Optim_Port)
}
Rebalance_Dates <- Combined_df %>%
select(date) %>%
unique() %>%
#Make sure there is available data
filter(date >= (first(date) + years(3))) %>%
#Choose Quaterly Rebalancing
filter(month(date) %in% c(3, 6, 9, 12)) %>%
pull(date)
Weights_df <- tibble()
for (date in Rebalance_Dates) {
data_subset <- Combined_df %>% filter(date <= date)
Weights <- Optimise_Portfolio_ROI(data_subset)
Weights <- Weights %>%
mutate(RebalancingDate = date)
Weights_df <- rbind(Weights_df, Weights)
}
View(Weights_df)
Weights_df <- tibble()
for (date in Rebalance_Dates) {
data_subset <- Combined_df %>% filter(date <= date)
Weights <- Optimise_Portfolio_ROI(data_subset)
Weights <- Weights %>%
mutate(RebalancingDate = as.Date(date))
Weights_df <- rbind(Weights_df, Weights)
}
View(Weights_df)
Plot_1 <- tbl_xts(., cols_to_xts = Weight, spread_by = Name) %>%
.[endpoints(.,'months')] %>% chart.StackedBar()
library(tbl2xts)
library(PerformanceAnalytics)
Plot_1 <- tbl_xts(., cols_to_xts = Weight, spread_by = Name) %>%
.[endpoints(.,'months')] %>% chart.StackedBar()
Plot_1 <- tbl_xts(., cols_to_xts = Weight, spread_by = Name)
Plot_1 <- Weights_df %>% tbl_xts(., cols_to_xts = Weight, spread_by = Name) %>%
.[endpoints(.,'months')] %>% chart.StackedBar()
Weights_df %>% tbl_xts(., cols_to_xts = Weight, spread_by = Name)
Weights_df <- Weights_df %>% rename("date" = "RebalancingDate")
Weights_df <- Weights_df %>% rename("date" = "RebalancingDate") %>%
select(date, Name, Weight)
for (date in Rebalance_Dates) {
#Only look at three years prior to rebalance
data_subset <- Combined_df %>% filter(date <= date)
Weights <- Optimise_Portfolio_ROI(data_subset)
Weights <- Weights %>%
mutate(RebalancingDate = as.Date(date))
Weights_df <- rbind(Weights_df, Weights)
}
Rebalance_Dates <- Combined_df %>%
select(date) %>%
unique() %>%
#Make sure there is available data
filter(date >= (first(date) + years(3))) %>%
#Choose Quaterly Rebalancing
filter(month(date) %in% c(3, 6, 9, 12)) %>%
pull(date)
Weights_df <- tibble()
for (date in Rebalance_Dates) {
#Only look at three years prior to rebalance
data_subset <- Combined_df %>% filter(date <= date)
Weights <- Optimise_Portfolio_ROI(data_subset)
Weights <- Weights %>%
mutate(RebalancingDate = as.Date(date))
Weights_df <- rbind(Weights_df, Weights)
}
Weights_df <- Weights_df %>% rename("date" = "RebalancingDate") %>%
select(date, Name, Weight)
Plot_1 <- Weights_df %>% tbl_xts(., cols_to_xts = Weight, spread_by = Name) %>%
.[endpoints(.,'months')] %>% chart.StackedBar()
Rebalance_Dates <- Combined_df %>%
select(date) %>%
unique() %>%
#Make sure there is available data
filter(date >= (first(date) + years(3))) %>%
#Choose Quaterly Rebalancing
filter(month(date) %in% c(3, 6, 9, 12)) %>%
pull(date)
Weights_df <- tibble()
for (date in Rebalance_Dates) {
#Only look at three years prior to rebalance
data_subset <- Combined_df %>% filter(date <= date)
Weights <- Optimise_Portfolio_ROI(data_subset)
Weights <- Weights %>%
mutate(RebalancingDate = as.Date(date))
Weights_df <- rbind(Weights_df, Weights)
}
Weights_df <- Weights_df %>% rename("date" = "RebalancingDate") %>%
select(date, Name, Weight)
Plot_1 <- Weights_df %>% tbl_xts(., cols_to_xts = Weight, spread_by = Name) %>%
.[endpoints(.,'months')] %>% chart.StackedBar(main = "Optimal Weights of Portfolio",
ylab = "Weight (%)",
xlab = "Date",
col = c(brewer.pal(4, "Set3")))
library(RColorBrewer)
Rebalance_Dates <- Combined_df %>%
select(date) %>%
unique() %>%
#Make sure there is available data
filter(date >= (first(date) + years(3))) %>%
#Choose Quaterly Rebalancing
filter(month(date) %in% c(3, 6, 9, 12)) %>%
pull(date)
Weights_df <- tibble()
for (date in Rebalance_Dates) {
#Only look at three years prior to rebalance
data_subset <- Combined_df %>% filter(date <= date)
Weights <- Optimise_Portfolio_ROI(data_subset)
Weights <- Weights %>%
mutate(RebalancingDate = as.Date(date))
Weights_df <- rbind(Weights_df, Weights)
}
Weights_df <- Weights_df %>% rename("date" = "RebalancingDate") %>%
select(date, Name, Weight)
Plot_1 <- Weights_df %>% tbl_xts(., cols_to_xts = Weight, spread_by = Name) %>%
.[endpoints(.,'months')] %>% chart.StackedBar(main = "Optimal Weights of Portfolio",
ylab = "Weight (%)",
xlab = "Date",
col = c(brewer.pal(4, "Set3")))
source("code/Optimise_Portfolio_ROI")
setwd("C:/Users/andre/OneDrive/Documents/Masters_2024_stuff/Financial_Econometrics/Fin_Metrics_Exam/22568948_fin_metrics/Questions/Question_6")
source("code/Optimise_Portfolio_ROI")
Opt_Weights <- Optimise_Portfolio_ROI(Combined_df)
Opt_Weights_Now <- Optimise_Portfolio_ROI(Combined_df)
View(Opt_Weights_Now)
kable(Opt_Weights_Now)
Opt_Weights_Now <- Optimise_Portfolio_ROI(Combined_df)
kable(Opt_Weights_Now)
library(kableExtra)
kable(Opt_Weights_Now)
row_categories <- c("Other", "Bonds & Credit", "Bonds & Credit",
"Bonds & Credit", "Bonds & Credit", "Bonds & Credit",
"Bonds & Credit", "Other", "Other", "Equities",
"Equities", "Equities", "Equities")
colors <- c("lightblue", "lightgreen", "lightpink")
Opt_Weights_Now <- Optimise_Portfolio_ROI(Combined_df) %>%
mutate(Category = row_categories)
Table_1 <- kable(Opt_Weights_Now, format = "html", escape = F,
col.names = c("Asset", "Weight", "Group")) %>%
row_spec(1, background = colors[1]) %>%
row_spec(8:9, background = colors[1]) %>%
row_spec(2:7, background = colors[2]) %>%
row_spec(10:13, background = colors[3])
Table_1
Table_1 <- kable(Opt_Weights_Now, format = "html", escape = F,
col.names = c("Asset", "Weight", "Group")) %>%
row_spec(1, background = colors[1]) %>%
row_spec(8:9, background = colors[1]) %>%
row_spec(2:7, background = colors[2]) %>%
row_spec(10:13, background = colors[3]) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
position = "center")
library(gt)
Opt_Weights_Now <- Optimise_Portfolio_ROI(Combined_df) %>%
mutate(Category = row_categories) %>% gt()
Opt_Weights_Now
Opt_Weights_Now <- Optimise_Portfolio_ROI(Combined_df) %>%
mutate(Category = row_categories) %>% gt() %>%
tab_header(title = "Optimal Portfolio Weights in 2021",
subtitle = "Different Row Colours by Category")
Opt_Weights_Now
Opt_Weights_Now <- Optimise_Portfolio_ROI(Combined_df) %>%
mutate(Category = row_categories) %>% gt() %>%
tab_header(title = "Optimal Portfolio Weights in 2021",
subtitle = "Different Row Colours by Category") %>%
tab_style(style = list(
cell_fill(color = colors[1]),
locations = cells_body(rows = Category == "Other")
))
Opt_Weights_Now <- Optimise_Portfolio_ROI(Combined_df) %>%
mutate(Category = row_categories) %>% gt() %>%
tab_header(title = "Optimal Portfolio Weights in 2021",
subtitle = "Different Row Colours by Category") %>%
tab_style(style = list(
cell_fill(color = colors[1])),
locations = cells_body(rows = Category == "Other")
))
